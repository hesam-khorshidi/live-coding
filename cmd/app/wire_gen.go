// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"github.com/labstack/echo/v4"
	"live-coding/config"
	"live-coding/infra"
	http2 "live-coding/internal/shared/adapter/inbound/http"
	"live-coding/internal/user/adapter/inbound/http"
	"live-coding/internal/user/adapter/outbound/file"
	"live-coding/internal/user/adapter/outbound/sql/user_repo"
	"live-coding/internal/user/core/port/inbound"
	"live-coding/internal/user/core/port/outbound"
	"live-coding/internal/user/core/service/user_srv"
)

// Injectors from wire.go:

func InitHttp(configConfig config.Config) (Http, func(), error) {
	databaseConfig := provideDatabaseConfig(configConfig)
	txDB, cleanup, err := infra.NewDBWithTX(databaseConfig)
	if err != nil {
		return Http{}, nil, err
	}
	echo, err := infra.NewHttpServer(txDB)
	if err != nil {
		cleanup()
		return Http{}, nil, err
	}
	httpServerConfig := provideHttpServerConfig(configConfig)
	dependencies := provideHttpDependencies(echo, httpServerConfig)
	repository := user_repo.New(txDB)
	fileConfig := provideFileConfig(configConfig)
	service := file.New(fileConfig)
	workerConfig := provideWorkerConfig(configConfig)
	user_srvService := user_srv.New(repository, service, workerConfig)
	controller := http.Init(dependencies, user_srvService)
	appHttp := provideHttp(echo, controller)
	return appHttp, func() {
		cleanup()
	}, nil
}

// wire.go:

var inboundSet = wire.NewSet(http.Init)

var infraSet = wire.NewSet(infra.NewHttpServer, infra.NewDBWithTX, infra.NewRedisClient, provideHttpDependencies,
	provideRunInTransaction,
)

var configSet = wire.NewSet(
	provideHttpServerConfig,
	provideDatabaseConfig,
	provideWorkerConfig,
	provideFileConfig,
)

var serviceSet = wire.NewSet(user_srv.New, wire.Bind(new(inbound.UserService), new(user_srv.Service)))

var outboundSet = wire.NewSet(user_repo.New, wire.Bind(new(outbound.UserRepository), new(user_repo.Repository)), file.New, wire.Bind(new(outbound.UserReaderService), new(file.Service)))

func provideHttpDependencies(e *echo.Echo, cfg infra.HTTPServerConfig) http2.Dependencies {
	return http2.Dependencies{
		Echo:   e,
		Prefix: cfg.ApiPrefix + cfg.ApiVersion,
		Debug:  cfg.Debug,
	}
}

func provideDatabaseConfig(cfg config.Config) infra.DatabaseConfig {
	return infra.DatabaseConfig{
		DatabasePort:       cfg.Database.Port,
		DatabaseHost:       cfg.Database.Host,
		DatabaseName:       cfg.Database.Name,
		DatabaseUsername:   cfg.Database.Username,
		DatabasePassword:   cfg.Database.Password,
		DatabaseTimezone:   cfg.Database.Timezone,
		DatabaseSslMode:    cfg.Database.SSLMode,
		DatabaseLogEnabled: cfg.Logging.Enabled,
	}
}

func provideHttpServerConfig(cfg config.Config) infra.HTTPServerConfig {
	return infra.HTTPServerConfig{
		Debug:      cfg.App.Environment == "dev",
		Protocol:   cfg.Server.Protocol,
		Host:       cfg.Server.Host,
		Port:       cfg.Server.Port,
		ApiPrefix:  cfg.Server.ApiPrefix,
		ApiVersion: cfg.Server.ApiVersion,
		LogEnable:  cfg.Logging.Enabled,
	}
}

func provideFileConfig(cfg config.Config) config.FileConfig {
	return cfg.FileConfig
}

func provideWorkerConfig(cfg config.Config) config.WorkerConfig {
	return cfg.WorkerConfig
}

func provideRunInTransaction(txDB *infra.TxDB) infra.IRunInTransaction {
	return txDB.RunInTransaction
}

func provideHttp(
	server *echo.Echo,
	_ http.Controller,
) Http {
	return newHttp(server)
}
